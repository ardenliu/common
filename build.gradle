plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

configurations.all {
	 resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

ext {
    // Project constants
    project_name = 'ArdenCommon'
    artifact_group = 'com.github.ardenliu'
    project_version = "$version".toString()
    project_description = 'Java Common Shared Library'
    project_url = 'https://github.com/ardenliu/common'
    project_jdk = '1.8'
    jdk = JavaVersion.current().majorVersion
    jdk_javadoc = "https://docs.oracle.com/javase/$jdk/docs/api/".toString()
    if (JavaVersion.current().isJava11Compatible()) {
        jdk_javadoc = "https://docs.oracle.com/en/java/javase/$jdk/docs/api/".toString()
    }

	// Dependencies
	log4j_version = '2.13.3'
	spring_version = '5.2.9.RELEASE'		// arden-file arden-springjdbc
	jackson_version = '2.11.2'				// arden-jackson
	commons_lang3_version = '3.11'			// arden-sql arden-file arden-lang
	commons_text_version = '1.9'			// arden-sql
	commons_io_version = '2.8.0'			// arden-file arden-google-http-client
	google_http_client_version = '1.36.0'	// arden-google-http-client
	jdom2_version = '2.0.6'					// arden-jdom2
	guava_version = '29.0-jre' 				// arden-file
	picocli_version = '4.5.1'				// arden-picocli

	// Test dependencies
	junit_version = '5.7.0'
	junit_platform_launcher_version= '1.7.0'
	testcontainers_version = '1.14.3'			// arden-google-http-client
	mockserver_client_java_version = '5.11.1'	// arden-google-http-client
	
    isRelease = !version.toString().endsWith('-SNAPSHOT')
}

allprojects {
    apply plugin: 'java-library'
	apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    if (isRelease) {
        apply plugin: 'signing'
    }

    group = artifact_group
    version = project_version
    description = project_description

    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

	configurations.all {
		exclude group: 'ch.qos.logback', module: 'logback-classic'
		exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
	}

    repositories {
    	//maven {
        //	url 'https://oss.sonatype.org/content/repositories/snapshots/'
    	//}
    	
        mavenCentral()
        if (!isRelease) {
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
            maven { url 'https://oss.sonatype.org/content/repositories/staging' }
        }
        jcenter()
    }

    tasks.withType(Javadoc) {
        options {
            encoding = 'UTF-8'
            addStringOption 'Xdoclint:none', '-quiet'
            addStringOption 'encoding', 'UTF-8'
        }
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.incremental = true
    }

    task downloadDependencies() {
        description 'Download all dependencies to the Gradle cache'
        doLast {
            configurations.findAll { it.canBeResolved }.files
        }
    }
    
	java {
    	withJavadocJar()
    	withSourcesJar()
	}
	
	test {
		useJUnitPlatform()
    	finalizedBy jacocoTestReport // report is always generated after tests run
	}

	jacocoTestReport {
    	dependsOn test // tests are required to run before generating the report
	}
}

subprojects {
    archivesBaseName = "$project.name"

	// https://docs.gradle.org/current/userguide/java_library_plugin.html
    dependencies {
    	api "org.apache.logging.log4j:log4j-api:$log4j_version"
		runtimeOnly "org.apache.logging.log4j:log4j-jcl:$log4j_version"
		runtimeOnly "org.apache.logging.log4j:log4j-jul:$log4j_version"
		runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
	
		testCompileOnly "org.junit.jupiter:junit-jupiter-api:$junit_version"
    	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"
		testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit_platform_launcher_version"
    }
	
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifactId archivesBaseName

                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

				// TODO: create maven bom
                pom {
                    name = 'ArdenCommon'
                    description = 'Java Common Shared Library'
                    url = 'https://github.com/ardenliu/common'
                    organization {
                        name = 'ArdenLiu'
                        url = 'https://github.com/ardenliu/common'
                    }
                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/ardenliu/common/issues'
                    }
                    licenses {
                        license {
 							name = 'The Apache License, Version 2.0'
            				url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            				distribution = 'repo'
                        }
                    }
                    scm {
                        url = 'https://github.com/ardenliu/common'
                        connection = 'scm:git:git://github.com/ardenliu/common.git'
                        developerConnection = 'scm:git:ssh://git@github.com:ardenliu/common.git'
                    }
                    developers {
                        developer {
                            name = 'Arden'
                        }
                    }
                }
            }
        }

        repositories {
			maven {
            	if (isRelease) {
                	url 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
				} else {
					url 'https://oss.sonatype.org/content/repositories/snapshots/'
				}
				def sonatypeUsername = findProperty('sonatypeUsername')
				def sonatypePassword = findProperty('sonatypePassword')
				if (sonatypeUsername != null && sonatypePassword != null) {
					credentials {
						username sonatypeUsername
						password sonatypePassword
					}
				}
			}
        }
    }

    if (isRelease) {
        signing {
            sign publishing.publications.mavenJava
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}